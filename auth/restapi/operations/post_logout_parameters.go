// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// NewPostLogoutParams creates a new PostLogoutParams object
//
// There are no default values defined in the spec.
func NewPostLogoutParams() PostLogoutParams {

	return PostLogoutParams{}
}

// PostLogoutParams contains all the bound params for the post logout operation
// typically these are obtained from a http.Request
//
// swagger:parameters PostLogout
type PostLogoutParams struct {

	// HTTP Request Object
	HTTPRequest *http.Request `json:"-"`

	/*
	  Required: true
	  In: header
	*/
	XXSRFTOKEN strfmt.UUID
}

// BindRequest both binds and validates a request, it assumes that complex things implement a Validatable(strfmt.Registry) error interface
// for simple values it will use straight method calls.
//
// To ensure default values, the struct must have been initialized with NewPostLogoutParams() beforehand.
func (o *PostLogoutParams) BindRequest(r *http.Request, route *middleware.MatchedRoute) error {
	var res []error

	o.HTTPRequest = r

	if err := o.bindXXSRFTOKEN(r.Header[http.CanonicalHeaderKey("X-XSRF-TOKEN")], true, route.Formats); err != nil {
		res = append(res, err)
	}
	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindXXSRFTOKEN binds and validates parameter XXSRFTOKEN from header.
func (o *PostLogoutParams) bindXXSRFTOKEN(rawData []string, hasKey bool, formats strfmt.Registry) error {
	if !hasKey {
		return errors.Required("X-XSRF-TOKEN", "header", rawData)
	}
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: true

	if err := validate.RequiredString("X-XSRF-TOKEN", "header", raw); err != nil {
		return err
	}

	// Format: uuid
	value, err := formats.Parse("uuid", raw)
	if err != nil {
		return errors.InvalidType("X-XSRF-TOKEN", "header", "strfmt.UUID", raw)
	}
	o.XXSRFTOKEN = *(value.(*strfmt.UUID))

	if err := o.validateXXSRFTOKEN(formats); err != nil {
		return err
	}

	return nil
}

// validateXXSRFTOKEN carries on validations for parameter XXSRFTOKEN
func (o *PostLogoutParams) validateXXSRFTOKEN(formats strfmt.Registry) error {

	if err := validate.FormatOf("X-XSRF-TOKEN", "header", "uuid", o.XXSRFTOKEN.String(), formats); err != nil {
		return err
	}
	return nil
}
